/* 
 * $Id$
 * 
 * Copyright (c) 2012-2021 Stephane GALLAND.
 * 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(TinyBasicParser)

package fr.utbm.info.da53.lw2.parser;

import java.util.SortedMap;

import fr.utbm.info.da53.lw2.error.CompilerException;import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.syntaxtree.*;import fr.utbm.info.da53.lw2.syntaxtree.binaryoperator.AdditionTreeNode;import fr.utbm.info.da53.lw2.syntaxtree.statement.EndStatementTreeNode;

public class TinyBasicParser{

    private int basicLineNumber = 1;
    private final SymbolTable symbolTable = new SymbolTable();

    /** Replies the symbol table used by the parsser.
    *  @return the symbol table
    */
    public SymbolTable getSymbolTable(){
        return this.symbolTable;
        }
}}
}}
}}
}}
}

PARSER_END(TinyBasicParser)

///SKIP
SKIP : {
  " "
  | "\t"
  | "\r"
  |  <"REM" ((" "|"\t")(~["\n","\r"])*)? ("\n" | "\r" | "\r\n" | "\n\r")>
}

///Token
TOKEN : {
    <NUMBER: ["0"-"9"] ("."(["0"-"9"])+)?>
    | <ID: (["a"-"z","A"-"Z"])+>
	| < STRING: "\"" (~["\""])* "\"" >
    | <CR: "\n">
    | <PLUS: "+">
    | <MINUS: "-">
    | <MULT: "*">
    | <DIV: "/">
    | <PRINT: "PRINT">
    | <LET: "LET">
    | <GOTO: "GOTO">
    | <IF: "IF">
    | <THEN: "THEN">
    | <ELSE: "ELSE">
    | <END: "END">
    | <REM: "REM">
    | <INPUT: "INPUT">
    | <GOSUB: "GOSUB">
    | <RETURN: "RETURN">
    | <LD: "<">
    | <LE: "<=">
    | <EQ: "=">
    | <NE: "<>" | "><">
    | <GE: ">=">
    | <GD: ">">
    | <LEFT_PAREN: "(">
    | <RIGHT_PAREN: ")">
    | <DQ: "\"">
}

///Grammar
private void code(SortedMap<Integer, AbstractStatementTreeNode> code) throws CompilerException :
{}
{
    line(code)
    rest(code)
}

private void rest(SortedMap<Integer, AbstractStatementTreeNode> code) throws CompilerException:
{}
{
    <CR> code(code) rest(code)
    | { return; }
}


private void line(SortedMap<Integer, AbstractStatementTreeNode> code) throws CompilerException:
{
    Token t;
    AbstractStatementTreeNode s;
}
{
    t=<NUMBER> s = statement() {
                                    Integer currentLineNumber = Number.parseInt(t.image);
                                    if(currentLineNumber==null){
                                        throw new CompilerException("Invalid line number: "+t.image);
                                    }
                                    if(s != null){
                                        code.put(currentLineNumber, s);
                                    }
                                    this.basicLineNumber = currentLineNumber + 1;
                                }

    | statement() {
                    if(s != null){
                        code.put(this.basicLineNumber, s);
                    }
                    this.basicLineNumber++;
                    }
}

private AbstracStatementTreeNode statement() throws CompilerException:
{
    Token t, t1, t2;
    AbstractValueTreeNode a,a1;
    AbstractComparisonOperatorTreeNode c;
    AbstracStatementTreeNode s,es;
}
{
    t=<PRINT> a=expression() { return new PrintStatementTreeNode(a); }
    | t=<LET> t1=<ID> t2=<EQ> a=expression() {
                                                this.symbolTable.declare(t1.image,t1.beginLine);
                                                if(a == null){
                                                    new CompilerException("Invalid expression in LET statement" + t.image
                                                                            + " , need expression. Line :" + t.endLine);
                                                }
                                                return new LetStatementTreeNode(t1.image, a); }
    | t=<GOTO> t1=<NUMBER> {
                            if(t1 == null){
                                throw new CompilerException("Invalid expression in GOTO statement" + t.image
                                                            + " , need expression. Line :" + t.endLine);
                            }
                            return new GotoStatementTreeNode(t1.image); }
    | t=<END> { return new EndStatementTreeNode(); }
    | t=<GOSUB> t1=<NUMBER> {
                            if(t1 == null){
                                throw new CompilerException("Invalid expression in GOSUB statement" + t.image
                                                            + " , need expression. Line :" + t.endLine);
                            }
                            return new GosubStatementTreeNode(a); }
    | t=<RETURN> { return new ReturnStatementTreeNode(); }
    | t=<INPUT> t1=<ID> {
                         if(t1 == null){
                             throw new CompilerException("Invalid expression in INPUT statement" + t.image
                                                        + " , need expression. Line :" + t.endLine);
                         }
                         return new InputStatementTreeNode(t1.image); }
    | t=<END> { return new EndStatementTreeNode(); }
    | t=<IF> a=expression() c=relationalOperator() a1=expression()
      t2=<THEN> s=statement() s2=eelse() {
                                                                    if(a == null){
                                                                        throw new CompilerException("Invalid expression in IF statement" + t.image
                                                                                                    + " , need expression. Line :" + t.endLine);
                                                                     }
                                                                    if(c == null){
                                                                       throw new CompilerException("Invalid expression in IF statement" + t.image
                                                                                                   + " , need relational operator. Line :" + t.endLine);
                                                                     }
                                                                    if(a1 == null){
                                                                        throw new CompilerException("Invalid expression in IF statement" + t.image
                                                                                                    + " , need second expression. Line :" + t.endLine);
                                                                    }
                                                                    c.setOperands(a,a1);
                                                                    if(s == null){
                                                                        throw new CompilerException("Invalid expression in IF statement" + t.image
                                                                                                    + " , need statement. Line :" + t.endLine);
                                                                     }
                                                                    return new IfStatementTreeNode();}

}

private AbstracStatementTreeNode eelse() throws CompilerException:
{
    Token t;
    AbstracStatementTreeNode s;
}
{
    t=<ELSE> s=statement() {
                            if(s == null){
                                throw new CompilerException("Invalid expression in ELSE statement" + t.image
                                                            + " , need statement. Line :" + t.endLine);
                            }
                            return s;
                            }
    | { return null; }
}


private AbstractValueTreeNode expression() throws CompilerException:
{
    AbstractValueTreeNode t,e;
}
{
    t=term() e=expressionTail(t) { return e;}
}

private AbstractValueTreeNode expressionTail(AbstractValueTreeNode leftOperand) throws CompilerException:
{
    AbstractValueTreeNode t,e;
    AbstractBinaryOperatorTreeNode o;

}
{
    o=<PLUS> t=term() e=expressionTail(t) { if(leftOperand ==null){
                        throw new CompilerException("Invalid expression in PLUS statement" + t.image
                                                    + " , need left operand. Line :" + t.endLine);
                    }
                    o.setOperands(leftOperand,t);
                    return new AdditionTreeNode(leftOperand,t);
                    }
    | o=<MINUS> t=term() e=expressionTail(t) { if(leftOperand ==null){
                                                throw new CompilerException("Invalid expression in MINUS statement" + t.image
                                                                            + " , need left operand. Line :" + t.endLine);

                                            }
                                            return new SubtractionTreeNode(leftOperand,t);
                                            }
    | o=<MULT> t=term() e=expressionTail(t) { if(leftOperand == null){
                                                throw new CompilerException("Invalid expression in MULT statement" + t.image
                                                                            + " , need left operand. Line :" + t.endLine);

                                            }
                                            return new MultiplicationTreeNode(leftOperand,t);
                                            }

    | o=<DIV> t=term() e=expressionTail(t) { if(leftOperand ==null){
                                                throw new CompilerException("Invalid expression in MINUS statement" + t.image
                                                                            + " , need left operand. Line :" + t.endLine);

                                            }
                                            return new DivisionTreeNode(leftOperand,t);
                                            }
    | { return null; }
}

private AbstractValueTreeNode term() throws CompilerException:
{
    Token t,t1;
    AbstractValueTreeNode e;
}
{
    t=<NUMBER> { return new NumberTreeNode(t.image); }
    | t=<ID> { return new IdentifierTreeNode(t.image); }
    | t=<LEFT_PAREN> e=expression() t1=<RIGHT_PAREN> { if (e == null){
                                                        throw new CompilerException("Invalid expression in term statement" + t.image
                                                                                    + " , need expression. Line :" + t.endLine);
                                                    }
                                                    return e;
                                                    }
}


private AbstractComparisonOperatorTreeNode relationalOperator() throws CompilerException :
{}
{
    <LD> { return new SmallerThanOperatorTreeNode(); }
    | <LE> { return new SmallerThanOrEqualOperatorTreeNode(); }
    | <EQ> { return new EqualOperatorTreeNode(); }
    | <NE> { return new NotEqualOperatorTreeNode(); }
    | <GE> { return new GreaterThanOrEqualOperatorTreeNode(); }
    | <GD> { return new GreaterThanOperatorTreeNode(); }
}





