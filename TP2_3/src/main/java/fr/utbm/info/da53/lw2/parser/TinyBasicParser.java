/* TinyBasicParser.java */
/* Generated By:JavaCC: Do not edit this line. TinyBasicParser.java */
package fr.utbm.info.da53.lw2.parser;

import java.io.InputStream;import java.util.SortedMap;

import fr.utbm.info.da53.lw2.error.CompilerException;
import fr.utbm.info.da53.lw2.symbol.*;
import fr.utbm.info.da53.lw2.syntaxtree.*;
import java.util.TreeMap;
import fr.utbm.info.da53.lw2.context.Statement;
import fr.utbm.info.da53.lw2.error.CompilationErrorType;
import fr.utbm.info.da53.lw2.type.NumberUtil;

import fr.utbm.info.da53.lw2.syntaxtree.binaryoperator.*;
import fr.utbm.info.da53.lw2.syntaxtree.statement.*;
import fr.utbm.info.da53.lw2.syntaxtree.comparisonoperator.*;

public class TinyBasicParser implements TinyBasicParserConstants {

    private int basicLineNumber = 1;
    private final SymbolTable symbolTable = new SymbolTable();


    /** Replies the symbol table used by the parsser.
    *  @return the symbol table
    */
    public SymbolTable getSymbolTable(){
        return this.symbolTable;
    }

    /** Run the lexer and the syntax analyzer.
    * @return the syntax tree.
    * @throw CompilerException
    */
    public SortedMap<Integer,Statement> executeCompiler() throws CompilerException {
        try {
            SortedMap<Integer,Statement> code = new TreeMap<Integer,Statement>();
            this.symbolTable.clear();
            code(code);
            return code;
        }
        catch(ParseException e) {
            if (e.currentToken!=null) {
                throw new CompilerException(CompilationErrorType.SYNTAX_ERROR,
                                                e.currentToken.endLine, e);
            }
            else if (this.token!=null) {
                throw new CompilerException(CompilationErrorType.SYNTAX_ERROR,
                                                this.token.endLine,  e);
            }
            throw new CompilerException(CompilationErrorType.SYNTAX_ERROR, e);
        }
        catch(TokenMgrError e) {
            if (this.token!=null) {
                throw new CompilerException(CompilationErrorType.ILLEGAL_CHARACTER,
                                                this.token.endLine,  e);
            }
            throw new CompilerException(CompilationErrorType.INTERNAL_LEXER_ERROR, e);
        }
        catch(Throwable e) {
            throw new CompilerException(CompilationErrorType.INTERNAL_ERROR, e);
        }
    }

  final private void code(SortedMap<Integer, Statement> code) throws ParseException, CompilerException {
    line(code);
    rest(code);
}

  final private void rest(SortedMap<Integer, Statement> code) throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CR:{
      jj_consume_token(CR);
      code(code);
      rest(code);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
{if ("" != null) return;}
    }
}

  final private void line(SortedMap<Integer, Statement> code) throws ParseException, CompilerException {Token t;
    AbstractStatementTreeNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      t = jj_consume_token(NUMBER);
      s = statement();
Integer currentLineNumber = NumberUtil.parseInt(t.image);
                                    if(currentLineNumber==null){
                                        {if (true) throw new CompilerException(CompilationErrorType.NUMBER_LITERAL_REQUIRED, t.beginLine, "Null");}
                                    }
                                    if(s != null){
                                        code.put(currentLineNumber, s);
                                    }
                                    this.basicLineNumber = currentLineNumber + 1;
      break;
      }
    case PRINT:
    case LET:
    case GOTO:
    case IF:
    case END:
    case INPUT:
    case GOSUB:
    case RETURN:{
      s = statement();
if(s != null){
                        code.put(this.basicLineNumber, s);
                    }
                    this.basicLineNumber++;
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final private AbstractStatementTreeNode statement() throws ParseException, CompilerException {Token t, t1, t2;
    AbstractValueTreeNode a,a1;
    AbstractComparisonOperatorTreeNode c;
    AbstractStatementTreeNode s,s2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:{
      t = jj_consume_token(PRINT);
      a = expression();
{if ("" != null) return new PrintStatementTreeNode(a);}
      break;
      }
    case LET:{
      t = jj_consume_token(LET);
      t1 = jj_consume_token(ID);
      t2 = jj_consume_token(EQ);
      a = expression();
this.symbolTable.declare(t1.image,t1.beginLine);
                                                if(a == null){
                                                    new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine, "Invalid expression in LET statement");
                                                }
                                                {if ("" != null) return new LetStatementTreeNode(t1.image, a);}
      break;
      }
    case GOTO:{
      t = jj_consume_token(GOTO);
      a1 = expression();
if(a1 == null){
                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine, "Invalid expression in GOTO statement");}
                            }
                            {if ("" != null) return new GotoStatementTreeNode(a1);}
      break;
      }
    case END:{
      t = jj_consume_token(END);
{if ("" != null) return new EndStatementTreeNode();}
      break;
      }
    case GOSUB:{
      t = jj_consume_token(GOSUB);
      a1 = expression();
if(a1 == null){
                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine, "Invalid expression in GOSUB statement");}
                            }
                            {if ("" != null) return new GosubStatementTreeNode(a1);}
      break;
      }
    case RETURN:{
      t = jj_consume_token(RETURN);
{if ("" != null) return new ReturnStatementTreeNode();}
      break;
      }
    case INPUT:{
      t = jj_consume_token(INPUT);
      t1 = jj_consume_token(ID);
if(t1 == null){
                             {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine, "Invalid expression in INPUT statement");}

                         }
                         this.symbolTable.declare(t1.image,t1.beginLine);
                         {if ("" != null) return new InputStatementTreeNode(t1.image);}
      break;
      }
    case IF:{
      t = jj_consume_token(IF);
      a = expression();
      c = relationalOperator();
      a1 = expression();
      t2 = jj_consume_token(THEN);
      s = statement();
      s2 = eelse();
if(a == null){
                                                                       {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                                                        "Invalid expression in IF statement");}

                                                                     }
                                                                    if(c == null){
                                                                       {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                                                        "Invalid expression in IF statement");}
                                                                     }
                                                                    if(a1 == null){
                                                                        {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                                                         "Invalid expression in IF statement");}
                                                                    }
                                                                    c.setOperands(a,a1);
                                                                    if(s == null){
                                                                        {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                                                          "Invalid expression in IF statement");}
                                                                     }
                                                                    {if ("" != null) return new IfStatementTreeNode(c,s,s2);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractStatementTreeNode eelse() throws ParseException, CompilerException {Token t;
    AbstractStatementTreeNode s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      t = jj_consume_token(ELSE);
      s = statement();
if(s == null){
                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                  "Invalid expression in ELSE statement");}
                            }
                            {if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode expression() throws ParseException, CompilerException {AbstractValueTreeNode t,e;
    t = term();
    e = expressionTail(t);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode expressionTail(AbstractValueTreeNode leftOperand) throws ParseException, CompilerException {Token o;
    AbstractValueTreeNode t,e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      o = jj_consume_token(PLUS);
      t = term();
      e = expressionTail(t);
if(leftOperand ==null){
                        {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND, o.endLine,
                                                     "Invalid expression in PLUS statement");}
                    }
                    {if ("" != null) return new AdditionTreeNode(leftOperand,t);}
      break;
      }
    case MINUS:{
      o = jj_consume_token(MINUS);
      t = term();
      e = expressionTail(t);
if(leftOperand ==null){
                                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND,o.endLine,
                                                      "Invalid expression in MINUS statement");}

                                            }
                                            {if ("" != null) return new SubtractionTreeNode(leftOperand,t);}
      break;
      }
    case MULT:{
      o = jj_consume_token(MULT);
      t = term();
      e = expressionTail(t);
if(leftOperand == null){
                                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND,o.endLine,
                                                  "Invalid expression in MULT statement");}

                                            }
                                            {if ("" != null) return new MultiplicationTreeNode(leftOperand,t);}
      break;
      }
    case DIV:{
      o = jj_consume_token(DIV);
      t = term();
      e = expressionTail(t);
if(leftOperand ==null){
                                                {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_LEFT_OPERAND,o.endLine,
                                                   "Invalid expression in DIV statement");}

                                            }
                                            {if ("" != null) return new DivisionTreeNode(leftOperand,t);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return null;}
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractValueTreeNode term() throws ParseException, CompilerException {Token t,t1;
    AbstractValueTreeNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      t = jj_consume_token(NUMBER);
{if ("" != null) return new NumberTreeNode(t.image);}
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
{if ("" != null) return new IdentifierTreeNode(t.image);}
      break;
      }
    case LEFT_PAREN:{
      t = jj_consume_token(LEFT_PAREN);
      e = expression();
      t1 = jj_consume_token(RIGHT_PAREN);
if (e == null){
                                                        {if (true) throw new CompilerException(CompilationErrorType.EXPECTING_EXPRESSION, t.endLine,
                                                          "Invalid expression");}
                                                    }
                                                    {if ("" != null) return e;}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new StringTreeNode(t.image);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final private AbstractComparisonOperatorTreeNode relationalOperator() throws ParseException, CompilerException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LD:{
      jj_consume_token(LD);
{if ("" != null) return new SmallerThanOperatorTreeNode();}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return new SmallerThanOrEqualOperatorTreeNode();}
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
{if ("" != null) return new EqualOperatorTreeNode();}
      break;
      }
    case NE:{
      jj_consume_token(NE);
{if ("" != null) return new NotEqualOperatorTreeNode();}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return new GreaterThanOrEqualOperatorTreeNode();}
      break;
      }
    case GD:{
      jj_consume_token(GD);
{if ("" != null) return new GreaterThanOperatorTreeNode();}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public TinyBasicParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80000,0x1e9e0,0xe9e0,0x400,0xf00000,0x40070000,0x3f000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public TinyBasicParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TinyBasicParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TinyBasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TinyBasicParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TinyBasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TinyBasicParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TinyBasicParser(TinyBasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TinyBasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[33];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 33; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
